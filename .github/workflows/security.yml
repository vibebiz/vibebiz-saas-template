name: Security Scanning and Supply Chain

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  id-token: write
  packages: write
  actions: read
  attestations: write

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep

      - name: Run Bandit (Python Security)
        run: |
          bandit -r services/ packages/ \
            -f json -o bandit-report.json \
            -f sarif -o bandit-results.sarif || true

      - name: Run Safety (Dependency Vulnerabilities)
        run: |
          safety check --json --output safety-report.json || true
          safety check --output safety-results.txt || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto --sarif --output=semgrep-results.sarif . || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run ESLint Security
        run: |
          npx eslint --ext .ts,.tsx,.js,.jsx \
            --format json --output-file eslint-security-report.json \
            apps/ packages/ || true

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            bandit-results.sarif
            semgrep-results.sarif

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-analysis-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            eslint-security-report.json
          retention-days: 30

  dependency-scanning:
    name: Dependency Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-report.json'

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-dependency-reports
          path: |
            trivy-fs-results.sarif
            trivy-fs-report.json
          retention-days: 30

  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/public-web/Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (container)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'json'
          output: 'trivy-container-report.json'

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Upload container security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-container-reports
          path: |
            trivy-container-results.sarif
            trivy-container-report.json
          retention-days: 30

  # Generate SBOM and sign images (Foundation+ stages)
  supply-chain-security:
    name: Supply Chain Security (SLSA Level 3)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [secret-scanning, static-analysis, dependency-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Install Syft for SBOM generation
        uses: anchore/sbom-action/download-syft@v0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          file: ./apps/public-web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Sign container image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Generate and sign SBOM attestation
        run: |
          cosign attest --yes --predicate sbom.spdx.json --type spdxjson \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Verify signature
        run: |
          cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }} \
            --certificate-identity-regexp="${{ github.server_url }}/${{ github.repository }}" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

  # Generate SLSA Level 3 Provenance
  slsa-provenance:
    name: Generate SLSA Provenance
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [supply-chain-security]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ghcr.io/${{ github.repository }}
      digest: ${{ needs.supply-chain-security.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure as Code Security
  iac-security:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'infra/') || contains(github.event.head_commit.added, 'infra/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/
          format: sarif
          soft_fail: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infra/
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload IaC security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            results.sarif
            checkov-results.sarif

  # Security Report Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [secret-scanning, static-analysis, dependency-scanning, container-security]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Summary
        run: |
          echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if critical vulnerabilities were found
          if [ -f "security-analysis-reports/bandit-report.json" ]; then
            echo "- ✅ Bandit (Python Security): Completed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "security-analysis-reports/semgrep-report.json" ]; then
            echo "- ✅ Semgrep (Static Analysis): Completed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "trivy-dependency-reports/trivy-fs-report.json" ]; then
            echo "- ✅ Trivy (Dependency Scan): Completed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "trivy-container-reports/trivy-container-report.json" ]; then
            echo "- ✅ Trivy (Container Scan): Completed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review detailed reports in the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any HIGH or CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed reports, check the 'Artifacts' section below." >> $GITHUB_STEP_SUMMARY
