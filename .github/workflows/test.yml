name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  typescript-tests:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test:unit

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: typescript-test-results
          path: |
            test-results/
            coverage/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: typescript
          name: typescript-coverage

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv pip install --system -e ".[test,dev]"

      - name: Set Python Path
        run: echo "PYTHONPATH=services/public-api" >> $GITHUB_ENV

      - name: Run linting
        run: |
          ruff check .
          ruff format --check .
          mypy .

      - name: Run security checks
        run: |
          bandit -r services/ packages/ -f json -o bandit-report.json

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest \
            --cov=services \
            --cov=packages \
            --cov-report=xml:coverage/python/coverage.xml \
            --cov-report=html:coverage/python/htmlcov \
            --junitxml=test-results/pytest-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-test-results-${{ matrix.python-version }}
          path: |
            test-results/
            coverage/
            bandit-report.json
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/python/coverage.xml
          flags: python
          name: python-coverage

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv pip install --system -e ".[dev]"

      - name: Run Bandit security scan
        run: bandit -r services/ packages/ -f json -o bandit-report.json || true

      - name: Run Safety dependency scan
        run: safety check --json --output safety-report.json || true

      - name: Run Semgrep scan
        run: semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
          retention-days: 30
